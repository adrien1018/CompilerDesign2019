B06902021 吳聖福
B07902024 塗大為

Compiling:
  $ make

Usage:
  $ ./parser [--help|-h]
  $ ./parser [--debug] [-o graph_out] file
(use --debug to print parsing details)

Some grammar rules in the original parser file seems incorrect, and were fixed:
  (1) The original grammar allows arbitrary expressions (`expr`) for array size
      in function parameters. Fixed by replacing `expr` by `cexpr`.
  (2) The original grammar use different nonterminal for types and identifiers.
      To implement `typedef`, we view typenames as ordinary tokens, and leave
      type identifing to the semantics phase.

Some grammar rules are simplified:
  (1) To simplify the operator precedence parsing, the functionality of
      operator precedence in Bison is used instead of multiple-layer grammar
      lists.
  (2) Factor out several nonterminals, such as `param_list` and `unifact`.

Note there is still some inconsistency with standard C:
  (1) In C, == and != have lower precedence than <, >, <=, >=
  (2) In C, `if`, `for` and `while` allow arbitrary expressions in all fields
      inside the parentheses (including assign expression, expressions separated
      by commas, etc.)
      (The sample tree graph indicates that `while` and `if` does not allow
      expression lists.)
